apply plugin: 'java-library'
apply plugin: 'maven-publish'

group = 'net.timelegend.pdf'
version = '0.1.0'

buildscript {
	repositories {
		if (project.hasProperty('MAVEN_REPO')) {
			maven { url MAVEN_REPO }
		} else {
			maven { url "file://${System.properties['user.home']}/MAVEN" }
		}
		google()
		mavenCentral()
	}
	dependencies {
		classpath 'com.android.tools.build:gradle:8.1.1'
	}
}

allprojects {
	repositories {
		if (project.hasProperty('MAVEN_REPO')) {
			maven { url MAVEN_REPO }
		} else {
			maven { url "file://${System.properties['user.home']}/MAVEN" }
		}
		google()
		mavenCentral()
	}

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.encoding = 'UTF-8'
            options.compilerArgs += [
                '-Xlint:unchecked',
                '-Xlint:deprecation',
            ]
        }
    }
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:31.1-jre'
}

tasks.named('jar') {
    manifest {
        attributes('Implementation-Title': project.name,
                   'Implementation-Version': project.version)
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

project.afterEvaluate {
	publishing {
		publications {
			release(MavenPublication) {
				artifactId 'crl'
				artifact(jar)

				pom {
					name = 'crl'
					url = 'https://github.com/elementdavv/crl'
					description = 'CRL Java PDFWriter'
					licenses {
						license {
							name = 'GNU Affero General Public License'
							url = 'https://opensource.org/license/bsd-3-clause'
						}
					}
                    developers {
                        developer {
                            id = 'elementdavv'
                            name = 'elementdavv'
                            email = 'elementdavv@hotmail.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:https://github.com/elementdavv/crl.git'
                        developerConnection = 'scm:git:git@github.com:elementdavv/crl.git'
                        url = 'https://github.com/elementdavv/crl'
                    }
				}
				pom.withXml {
					final dependenciesNode = asNode().appendNode('dependencies')
					configurations.implementation.allDependencies.each {
						def dependencyNode = dependenciesNode.appendNode('dependency')
						dependencyNode.appendNode('groupId', it.group)
						dependencyNode.appendNode('artifactId', it.name)
						dependencyNode.appendNode('version', it.version)
					}
				}
			}
		}
		repositories {
            maven {
				name 'Local'
				if (project.hasProperty('MAVEN_REPO')) {
					url = MAVEN_REPO
				} else {
					url = "file://${System.properties['user.home']}/MAVEN"
				}
            }
		}
	}
}
